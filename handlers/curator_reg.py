from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject

from utils.admin_utils import load_admins, save_admins

from keyboards.curator_reply import admin_kb
from keyboards.inline import curator_panel_events

router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –ø–∞–º—è—Ç—å
ADMINS = load_admins()

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

# /make_admin
@router.message(Command("make_admin"))
async def make_admin(message: Message, command: CommandObject):
    user_id = message.from_user.id
    args = command.args  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã

    await message.delete()

    if args != '119':
        await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞.")
        return

    if user_id in ADMINS:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∞–¥–º–∏–Ω.")
    else:
        ADMINS.add(user_id)
        save_admins(ADMINS)
        await message.answer("üîê –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ /admin - reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
@router.message(Command("admin"))
async def admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    await message.answer(
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        reply_markup=admin_kb,
        parse_mode="HTML"
    )
