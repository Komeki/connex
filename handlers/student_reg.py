from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.validate import validate_full_name

from keyboards.inline import confirm_reg
from keyboards.student_reply import student_main_kb
from keyboards.fabrics import (
    course_select_kb,
    major_select_kb,
)

from utils.states import Reg
from utils.database import (
    register_user,
    does_user_exists,
    get_majors_list,
)

router = Router()

VALID_CODES = ["SPECIAL"]

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–º–µ–Ω–∏
@router.message(Reg.code, ~F.text)
async def process_invalid_name_content_type(message: Message):
    await message.answer(
        "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.\n"
        "–§–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã
@router.message(Reg.group, ~F.text)
async def process_invalid_group_content_type(message: Message):
    await message.answer(
        "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.\n"
        "–§–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.",
        parse_mode="HTML"
    )

#1 /reg - –≤—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Reg.code –¥–ª—è –≤–≤–æ–¥–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
@router.message(Command(commands=["start", "reg"]))
async def start_registration(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if does_user_exists(user_id):
        await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    
    await state.set_state(Reg.code)
    await message.answer(
        "<b>–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        parse_mode="HTML"
    )

#2 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ Reg.name
@router.message(Reg.code)
async def process_special_code(message: Message, state: FSMContext):
    code_text = message.text
    if code_text not in VALID_CODES:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!')
        return
    await state.set_state(Reg.name)
    await message.answer(
        "‚úÖ <b>–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:\n"
        "<i>(–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)</i>", 
        parse_mode="HTML"
    )

#3 –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Reg.name - –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é Reg.course
@router.message(Reg.name)
async def process_name(message: Message, state: FSMContext):
    is_valid, error_message = validate_full_name(message.text)
    if not is_valid:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</b>\n\n"
            f"{error_message}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return

    formatted_name = " ".join(w.capitalize() for w in message.text.strip().split())
    await state.update_data(full_name=formatted_name)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=course_select_kb())
    await state.set_state(Reg.course)

# –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
@router.callback_query(Reg.course)
async def process_course(callback: CallbackQuery, state: FSMContext):
    course = int(callback.data.split("_")[1])
    await state.update_data(course=course)
    await callback.answer()

    majors = get_majors_list()
    print("MAJORS:", majors)
    await callback.message.answer(f"–í—Å–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(majors)}")

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=major_select_kb(majors))
    await state.set_state(Reg.major)

# –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(Reg.major)
async def process_major_name(callback: CallbackQuery, state: FSMContext):
    major_name = callback.data.removeprefix("major_name_")
    await state.update_data(major_name=major_name)
    await callback.answer()
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 119):")
    await state.set_state(Reg.group)

# –í–≤–æ–¥ –≥—Ä—É–ø–ø—ã
@router.message(Reg.group)
async def process_group(message: Message, state: FSMContext):
    group = message.text.strip()
    await state.update_data(group_num=group)

    data = await state.get_data()
    await message.answer(
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"üë§ –§–ò–û: {data['full_name']}\n"
        f"üìö –ö—É—Ä—Å: {data['course']}\n"
        f"üèõ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['major_name']}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {data['group_num']}",
        reply_markup=confirm_reg(),
        parse_mode="HTML"
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.callback_query(F.data == "confirm_profile")
async def confirm_profile(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    register_user(
        user_id=callback.from_user.id,
        telegram=callback.from_user.username,
        full_name=data['full_name'],
        course=data['course'],
        major=data['major_name'],
        group_num=data['group_num'],
        organisation="",
        curator=0
    )

    await state.clear()
    await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", parse_mode="HTML")
    await callback.message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=student_main_kb
    )