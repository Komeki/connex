from aiogram import Router, F
from aiogram.types import Message

from utils.admin_utils import load_admins
from keyboards.inline import curator_panel_events

router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –ø–∞–º—è—Ç—å
ADMINS = load_admins()

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

#1 –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ 
@router.message(F.text == "üìã –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def show_stats(message: Message):
    if not is_admin(message.from_user.id):
        return
    await message.answer(
        "–ú–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:", reply_markup=curator_panel_events()
    )

#2 –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@router.message(F.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def add_event(message: Message):
    if not is_admin(message.from_user.id):
        return
    await message.answer('–ï—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ.')

#3 –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
@router.message(F.text == "‚ùå –í—ã—Ö–æ–¥")
async def cancel_admin(message: Message):
    if not is_admin(message.from_user.id):
        return
    # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer('–ï—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ.')