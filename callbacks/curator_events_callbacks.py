from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext


from utils.states import CreateEvent, Mailing
from utils.database import add_event, get_event_by_id, export_registrations_to_excel

from keyboards.inline import confirm_posts, start_mailing_kb
from keyboards.curator_reply import admin_kb
from keyboards.fabrics import event_list_kb, Pagination

router = Router()

# 1 –ö–Ω–æ–ø–∫–∞ - –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
# –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data == "curator_create_event")
async def create_event(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(CreateEvent.name)
# –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(CreateEvent.name)
async def event_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(CreateEvent.description)
# –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
@router.message(CreateEvent.description)
async def event_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üïí –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 21 –º–∞—è –≤ 18:00):")
    await state.set_state(CreateEvent.start_time)
# –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
@router.message(CreateEvent.start_time)
async def event_start_time(message: Message, state: FSMContext):
    await state.update_data(start_time=message.text)
    await message.answer("üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:")
    await state.set_state(CreateEvent.location)
# –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.message(CreateEvent.location)
async def event_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(CreateEvent.image)
# –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.message(F.photo)
async def event_image(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    curator_id = message.from_user.id

    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(photo_id=photo_id, curator_id=curator_id)

    post_text = (
        f"<b>{data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b>\n\n"
        f"{data.get('description', '')}\n\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {data.get('start_date', '')}\n"
        f"üìç <b>–ú–µ—Å—Ç–æ:</b> {data.get('location', '')}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º
    msg_post = await message.answer_photo(
        photo=photo_id,
        caption=post_text,
        parse_mode="HTML"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(post_msg_id=msg_post.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", –æ—Ç–≤–µ—á–∞—è –Ω–∞ –ø–æ—Å—Ç
    await message.answer(
        '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç?',
        reply_markup=confirm_posts(),
        reply_to_message_id=msg_post.message_id
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞
@router.callback_query(F.data == "confirm_post")
async def confirm_post(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –ë–î
    add_event(
        name=data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏'),
        description=data.get('description', ''),
        start_date=data.get('start_date', ''),
        duration=data.get('duration', ''),
        location=data.get('location', ''),
        valid=1,
        image_id=data.get('photo_id'),
        curator_id=data.get('curator_id')
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await callback.message.answer(
        "–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ",
        reply_markup=admin_kb
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞
@router.callback_query(F.data == "cancel_post")
async def cancel_post(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    data = await state.get_data()
    post_msg_id = data.get('post_msg_id')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.delete()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    try:
        await callback.message.bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=post_msg_id
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    await callback.message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=admin_kb
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# ----------------------------------------------------------------------------

# 2 –ö–Ω–æ–ø–∫–∞ - –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
# –°–∞–º –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞
@router.callback_query(F.data == "curator_list_events")
async def list_events(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "üìã –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=event_list_kb(page=0)
    )
# –ü–∞–≥–∏–Ω–∞—Ü–∏—è - —Ä–∞–±–æ—Ç–∞ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
@router.callback_query(Pagination.filter())
async def paginate(callback: CallbackQuery, callback_data: Pagination):
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=event_list_kb(page=callback_data.page))
# post preview
@router.callback_query(F.data.startswith("event_"))
async def event_preview(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[1])
    event = get_event_by_id(event_id)
    await state.update_data(event_list_msg_id=callback.message.message_id)
    await state.update_data(event_id=event_id)
    if not event:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    post_text = (
        f"<b>{event['name']}</b>\n\n"
        f"{event['description']}\n\n"
        f"üóì <b>–í—Ä–µ–º—è:</b> {event['start_date']}\n"
        f"üìç <b>–ú–µ—Å—Ç–æ:</b> {event['location']}"
    )

    await callback.answer()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
    if event['image_id']:
        await callback.message.answer_photo(
            photo=event['image_id'],
            caption=post_text,
            reply_markup=start_mailing_kb(),
            parse_mode="HTML"
        )
        await state.set_state(Mailing.filter_select)
    else:
        await callback.message.answer(post_text, reply_markup=start_mailing_kb(), parse_mode="HTML")

    data = await state.get_data()
    list_msg_id = data.get("event_list_msg_id")
    if list_msg_id:
        await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=list_msg_id)
# –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@router.callback_query(F.data == "go_back_to_events_list")
async def back_to_events(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )
    await callback.message.answer(
        "üìã –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=event_list_kb(page=0)
    )
# ----------------------------------------------------------------------------
@router.callback_query(F.data == "export_registrations")
async def export_registrations_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    event_id = data.get('event_id')
    
    if not event_id:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", show_alert=True)
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
        filepath = export_registrations_to_excel(event_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        file = FSInputFile(filepath)
        await callback.message.answer_document(
            document=file,
            caption=f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        filepath.unlink()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", show_alert=True)