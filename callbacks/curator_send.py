from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from utils.states import Mailing

from keyboards.inline import filters_menu_kb
from keyboards.fabrics import course_select_post_kb, major_select_post_kb, confirm_mailing_kb, register_button

from utils.database import get_event_by_id, get_users_by_filters, is_user_registered, register_user_for_event

router = Router()

@router.callback_query(F.data == "start_mailing", Mailing.filter_select)
async def go_to_filters(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    data = await state.get_data()
    event_id = data.get('event_id')
    event = get_event_by_id(event_id=event_id)
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Å—Ç: {event['name']}\n\n"
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", 
        reply_markup=filters_menu_kb())

    await state.set_state(Mailing.filter_values)

@router.callback_query(F.data == "filter_course", Mailing.filter_values)
async def filters_selecting(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å: ', reply_markup=course_select_post_kb())

@router.callback_query(F.data == "filter_major", Mailing.filter_values)
async def filters_selecting(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ', reply_markup=major_select_post_kb())

@router.callback_query(F.data.startswith("course_"), Mailing.filter_values)
async def filters_selecting(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
    course = callback.data.split("_")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    data = await state.get_data()
    filters = data.get('filters', {})
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if 'courses' not in filters:
        filters['courses'] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É—Ä—Å —É–∂–µ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    if course in filters['courses']:
        # –£–¥–∞–ª—è–µ–º –∫—É—Ä—Å –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω
        filters['courses'].remove(course)
        await callback.answer(f"–ö—É—Ä—Å {course} —É–¥–∞–ª—ë–Ω", show_alert=False)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
        filters['courses'].append(course)
        await callback.answer(f"–ö—É—Ä—Å {course} –¥–æ–±–∞–≤–ª–µ–Ω", show_alert=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(filters=filters)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filter_text = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã: " + ", ".join(filters['courses']) if filters.get('courses') else "–§–∏–ª—å—Ç—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        text=filter_text,
        reply_markup=course_select_post_kb()  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫—É—Ä—Å–æ–≤
    )

@router.callback_query(F.data.startswith("major_"), Mailing.filter_values)
async def majors_selecting(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
    major = callback.data.split("_")[1]
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    data = await state.get_data()
    filters = data.get('filters', {})
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if 'majors' not in filters:
        filters['majors'] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É—Ä—Å —É–∂–µ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    if major in filters['majors']:
        # –£–¥–∞–ª—è–µ–º –∫—É—Ä—Å –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω
        filters['majors'].remove(major)
        await callback.answer(f"–ö—É—Ä—Å {major} —É–¥–∞–ª—ë–Ω", show_alert=False)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
        filters['majors'].append(major)
        await callback.answer(f"–ö—É—Ä—Å {major} –¥–æ–±–∞–≤–ª–µ–Ω", show_alert=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(filters=filters)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filter_text = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: " + ", ".join(filters['majors']) if filters.get('majors') else "–§–∏–ª—å—Ç—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        text=filter_text,
        reply_markup=major_select_post_kb()  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫—É—Ä—Å–æ–≤
    )

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤–æ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
@router.callback_query(F.data == "back_to_filters")
async def back_to_filters_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    filters = data.get('filters', {})
    user_count_f = len(get_users_by_filters(filters))

    filter_text = "–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n"
    if filters.get('courses'):
        filter_text += f"‚Ä¢ –ö—É—Ä—Å—ã: {', '.join(filters['courses'])}\n"
    if filters.get('majors'):
        filter_text += f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {', '.join(filters['majors'])}\n"
    filter_text += f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω—ã: {user_count_f}"
    
    await callback.message.edit_text(
        text=filter_text or "–§–∏–ª—å—Ç—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã",
        reply_markup=filters_menu_kb()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
    )

@router.callback_query(F.data == "filter_continue")
async def process_filters_done(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    filters = data.get('filters', {})
    event_id = data.get('event_id')
    
    if not filters:
        await callback.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    kb = await confirm_mailing_kb(event_id, filters)
    
    await callback.message.edit_text(
        f"üìä <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üìå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üë• –ë—É–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–æ: {len(get_users_by_filters(filters))} —á–µ–ª–æ–≤–µ–∫\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb,
        parse_mode="HTML"
    )

# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("confirm_mailing_"))
async def execute_mailing(callback: CallbackQuery, state: FSMContext, bot: Bot):
    event_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    filters = data.get('filters', {})
    event = get_event_by_id(event_id)
    
    post_text = (
        f"üì¢ <b>–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!</b>\n\n"
        f"üè∑ <b>{event['name']}</b>\n"
        f"üìÖ <b>–ö–æ–≥–¥–∞:</b> {event['start_date']}\n"
        f"üìç <b>–ì–¥–µ:</b> {event['location']}\n\n"
        f"{event['description']}"
    )

    users = get_users_by_filters(filters)
    
    for user in users:
        registered = is_user_registered(user['user_id'], event_id)
        try:
            if event.get('image_id'):
                await bot.send_photo(
                    chat_id=user['user_id'],
                    photo=event['image_id'],
                    caption=post_text,
                    parse_mode="HTML",
                    reply_markup=register_button(event_id, registered)
                )
            else:
                await bot.send_message(
                    chat_id=user['user_id'],
                    text=post_text,
                    parse_mode="HTML",
                    reply_markup=register_button(event_id, registered)
                )
        except Exception:
            continue

    await callback.message.edit_text(
        f"‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ö–≤–∞—Ç: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        parse_mode="HTML"
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("register_"))
async def process_registration(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    telegram = callback.from_user.username or str(callback.from_user.id)
    
    if is_user_registered(user_id, event_id):
        await callback.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
        return
    
    register_user_for_event(
        user_id=user_id,
        telegram=telegram,
        event_id=event_id
    )
    
    await callback.message.edit_reply_markup(
        reply_markup=register_button(event_id, True)
    )
    
    await callback.answer(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n",
        show_alert=False
    )