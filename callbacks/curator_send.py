from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from utils.states import Mailing
from keyboards.inline import (
    filters_menu_kb,
    confirm_mailing_kb
)
from keyboards.fabrics import (
    course_select_kb,
    major_select_kb
)
from utils.database import get_event_by_id

router = Router()

@router.callback_query(F.data == 'start_mailing')
async def start_mailing_process(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    event_id = data.get('event_id')
    
    if not event_id:
        await callback.answer("–û—à–∏–±–∫–∞: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ)
    event = get_event_by_id(event_id)
    if not event:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    await callback.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    await state.update_data(filters={})
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–î–∞–ª–µ–µ"
    await callback.message.answer(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=filters_menu_kb()
    )
    
    await state.set_state(Mailing.filter_select)

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
# @router.callback_query(Mailing.filter_select, F.data.startswith("filter_"))
# async def process_filter_selection(callback: CallbackQuery, state: FSMContext):
#     filter_type = callback.data.split("_")[1]
#     await callback.answer()
    
#     data = await state.get_data()
#     filters = data.get("filters", {})
    
#     if filter_type == "course":
#         await callback.message.edit_text(
#             "üéì –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
#             reply_markup=course_select_kb()
#         )
#     elif filter_type == "major":
#         await callback.message.edit_text(
#             "üìö –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
#             reply_markup=major_select_kb()
#         )
#     elif filter_type == "group":
#         await callback.message.edit_text(
#             "üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 101):"
#         )
#         await state.set_state(Mailing.filter_values)
#         await state.update_data(current_filter="group")
#     elif filter_type == "org":
#         await callback.message.edit_text(
#             "üèõ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:",
#             reply_markup=course_select_kb()
#         )
#     elif filter_type == "continue":
#         if not filters:
#             await callback.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞!", show_alert=True)
#             return
            
#         await callback.message.edit_text(
#             "‚úÖ –§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É?",
#             reply_markup=confirm_mailing_kb()
#         )
#         await state.set_state(Mailing.confirm)

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)
# @router.message(Mailing.filter_values, F.text)
# async def process_group_input(message: Message, state: FSMContext):
#     data = await state.get_data()
#     current_filter = data.get("current_filter")
    
#     if current_filter == "group":
#         filters = data.get("filters", {})
#         filters["group"] = message.text.strip()
        
#         await state.update_data(filters=filters)
#         await message.answer(
#             f"üë• –ì—Ä—É–ø–ø–∞ {message.text} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–∏–ª—å—Ç—Ä—ã",
#             reply_markup=filters_menu_kb()
#         )
#         await state.set_state(Mailing.filter_select)

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∫–Ω–æ–ø–∫–∏)
# @router.callback_query(Mailing.filter_select, F.data.startswith("select_"))
# async def process_filter_value(callback: CallbackQuery, state: FSMContext):
#     parts = callback.data.split("_")
#     filter_type = parts[1]
#     value = "_".join(parts[2:])
    
#     data = await state.get_data()
#     filters = data.get("filters", {})
    
#     if filter_type == "course":
#         filters["course"] = value
#     elif filter_type == "major":
#         filters["major"] = value
#     elif filter_type == "org":
#         filters["org"] = value
    
#     await state.update_data(filters=filters)
#     await callback.answer(f"‚úÖ {filter_type}: {value} –¥–æ–±–∞–≤–ª–µ–Ω–æ")
#     await callback.message.edit_text(
#         "üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ:",
#         reply_markup=filters_menu_kb()
#     )

# # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
# @router.callback_query(Mailing.confirm, F.data == "confirm_mailing")
# async def confirm_mailing(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    filters = data.get("filters", {})
    event_id = data.get("event_id")
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
    # –ù–∞–ø—Ä–∏–º–µ—Ä: get_users_by_filters(filters) –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–º event_id
    
    await callback.message.edit_text(
        f"‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {filters}"
    )
    await state.clear()