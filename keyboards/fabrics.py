from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from utils.database import get_events_paginated, get_majors_list, get_users_by_filters, get_event_by_id

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def course_select_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for k in range(1, 7):
        builder.button(text=f"{k}", callback_data=f"course_{k}")
    builder.adjust(6)
    return builder.as_markup()

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def major_select_kb(majors: list[str]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for major in majors:
        builder.button(text=major, callback_data=major)
    builder.adjust(2)
    return builder.as_markup()

class Pagination(CallbackData, prefix="pag"):
    action: str
    page: int

def paginator(page: int=0):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚¨Ö", callback_data=Pagination(action="prev", page=page).pack()),
        InlineKeyboardButton(text="‚û°", callback_data=Pagination(action="next", page=page).pack()),
        width=2
    )
    return builder.as_markup()

EVENTS_PER_PAGE = 5
def event_list_kb(page: int = 0) -> InlineKeyboardMarkup:   
    events = get_events_paginated(offset=page * EVENTS_PER_PAGE, limit=EVENTS_PER_PAGE)
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π ‚Äî –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ, —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    for event_id, name, time in events:
        button_text = f"{name} | {time}"
        builder.row(
            InlineKeyboardButton(text=button_text, callback_data=f"event_{event_id}"),
            width=1
        )

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨Ö", callback_data=Pagination(action="prev", page=page - 1).pack()))
    if len(events) == EVENTS_PER_PAGE:
        nav_buttons.append(InlineKeyboardButton(text="‚û°", callback_data=Pagination(action="next", page=page + 1).pack()))
    
    if nav_buttons:
        builder.row(*nav_buttons, width=2)

    return builder.as_markup()

def generate_events_kb(events: list, page: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    for event in events:
        event_id, name, start_date = event
        builder.button(
            text=f"{name} | {start_date}",
            callback_data=f"event_{event_id}"
        )

    builder.adjust(1)  # –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if len(events) == EVENTS_PER_PAGE:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page_{page + 1}"))

    if nav_buttons:
        builder.row(*nav_buttons)

    return builder.as_markup()

def course_select_post_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ 1‚Äì6
    for k in range(1, 7):
        builder.button(text=f"{k}", callback_data=f"course_{k}")
    builder.adjust(6)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.row(
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_filters")
    )

    return builder.as_markup()

def major_select_post_kb(selected=None):
    if selected is None:
        selected = []
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –ë–î
    majors = get_majors_list()
    
    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    for major in majors:
        builder.button(
            text=f"{'‚úÖ ' if major in selected else ''}{major}",
            callback_data=f"major_{major}"
        )
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    builder.adjust(2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_filters")
    )
    
    return builder.as_markup()

async def confirm_mailing_kb(event_id: int, filters: dict):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    users_count = len(get_users_by_filters(filters))
    event = get_event_by_id(event_id)
    
    builder = InlineKeyboardBuilder()
    
    builder.add(
        InlineKeyboardButton(
            text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ({users_count} —á–µ–ª.)",
            callback_data=f"confirm_mailing_{event_id}"
        ),
        InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
            callback_data="edit_filters"
        )
    )
    builder.adjust(1)
    
    return builder.as_markup()

def register_button(event_id: int, is_registered: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    
    :param event_id: ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    :param is_registered: –§–ª–∞–≥, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :return: InlineKeyboardMarkup —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    """
    builder = InlineKeyboardBuilder()
    
    if is_registered:
        builder.button(
            text="‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", 
            callback_data="already_registered"
        )
    else:
        builder.button(
            text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", 
            callback_data=f"register_{event_id}"
        )
    
    return builder.as_markup()